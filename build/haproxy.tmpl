global
    log 127.0.0.1 local0
    log-tag haproxy
    maxconn 2048
    chroot /var/lib/haproxy
    user haproxy
    group haproxy
    {{ if exists "/frontend/https" }}
    tune.ssl.default-dh-param 1024
    ssl-default-bind-ciphers kEECDH+aRSA+AES:kRSA+AES:+AES256:RC4-SHA:!kEDH:!LOW:!EXP:!MD5:!aNULL:!eNULL
    ssl-default-bind-options no-sslv3
    {{ end }}

defaults
    mode http
    log global

    # Setting options
    option httplog
    option dontlognull              # Disable logging of null connections as these can pollute the logs
    option redispatch               # Enable session redistribution in case of connection failure
    option tcp-smart-accept         # Performance tweak, saving one ACK packet during the accept sequence
    option tcp-smart-connect        # Performance tweak, saving of one ACK packet during the connect sequence
    option forwardfor
    option http-server-close

    # Setting timeouts
    timeout connect           5s
    timeout client            1m
    timeout server            1m
    timeout http-keep-alive  10s
    timeout check             5s
    retries                   3

    # Slowloris protection
    timeout http-request     10s     # Slowloris protection
    timeout tarpit            1m     # tarpit hold time
    timeout queue             1m
    backlog                10000

listen stats :1936
    option httpclose
    stats enable
    stats scope www_http
    {{ if exists "/frontend/https" }}
    stats scope www_https
    {{ end }}
    {{ range $backend := lsdir "/backend" }}
    stats scope {{ base $backend }}_cluster
    {{ end }}
    stats show-node
    stats show-legends
    stats refresh 20s
    stats uri /
    acl white_list src 127.0.0.1 {{ getv "/stats/white_list" }}
    tcp-request inspect-delay 2s
    tcp-request content accept if white_list
    tcp-request content reject

frontend www_http
    bind *:80
    reqadd X-Forwarded-Proto:\ http
    {{ if exists "/frontend/https" }}
    redirect scheme https code 301 if !{ ssl_fc }
    {{ else }}
    {{ range $backend := lsdir "/backend" }}
    {{ $hostname := printf "/backend/%s/hostname" $backend }}
    acl host_{{ base $backend }} hdr(host) -i {{ getv $hostname }}
    use_backend {{ base $backend }}_cluster if host_{{ base $backend }}
    {{ end }}
    {{ end }}

{{ if exists "/frontend/https" }}
frontend www_https
    bind *:443 ssl crt {{ getv "/frontend/https/cert" }}
    tcp-request inspect-delay 5s
    tcp-request content accept if { req_ssl_hello_type 1 }
    reqadd X-Forwarded-Proto:\ https
    {{ range $backend := lsdir "/backend" }}
    {{ $hostname := printf "/backend/%s/hostname" $backend }}
    acl host_{{ base $backend }} hdr(host) -i {{ getv $hostname }}
    use_backend {{ base $backend }}_cluster if host_{{ base $backend }}
    {{ end }}
{{ end }}

{{ range $backend := lsdir "/backend" }}
{{ $endpoints := printf "/backend/%s/endpoints/*" $backend }}{{ range gets $endpoints }}
backend {{ base $backend }}_cluster
    balance roundrobin
    option httpclose
    option forwardfor
    cookie SERVERID insert nocache indirect
    {{$id := printf .Key }}{{ with dir $id }}
    server {{ base $backend }}-{{ base $id  }} {{ getv $id }} cookie {{ base $backend }}-{{ base $id }} check
    {{ end }}
{{ end }}
{{ end }}
